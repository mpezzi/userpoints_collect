<?php

/**
 * @file
 * Provides test classes for UserpointsCollect module.
 */


/**
 * UserpointsCollect base test class with various helper functions.
 */
class UserpointsCollectTestCase extends DrupalWebTestCase {

}

/**
 * API Tests.
 */
class UserpointsCollectAPITestCase extends UserpointsCollectTestCase {
  private $privileged_user;
  private $authenticated_user;
  private $start;

  /**
   * Implements getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Userpoints Collect'),
      'description' => t('Tests the userpoints_collect module for proper eligibility period calculations'),
      'group' => t('Userpoints Collect'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    parent::setUp('userpoints', 'userpoints_collect');

    $this->privileged_user = $this->drupalCreateUser(array());
    $this->authenticated_user = $this->drupalCreateUser(array());
    $this->drupalLogin($this->authenticated_user);

    // TODO: set up various group ids (tid)

  }

  /**
   * Call userpoints_collect_eligibility() with interval restrictions
   */
  function testUserpointsCollectIntervalEligibility() {
    /**
     * Define interval testing settings and generate interval restriction.
     * Test settings:
     * - 5 second intervals
     * - First period starts 10 seconds from now.
     * - Last period last is 30 seconds from now.
     */
    $delay = 10;
    $interval_length = 5;
    $start = time() + $delay;
    userpoints_collect_restriction_generate_interval(NULL, $start, $start + 30, $interval_length);

    // Check eligibility before first period starts ($timestamp = 5 seconds before)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start - 5);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_EARLY, t("Single Interval > Interval calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));

    // Check eligibility at exactly the start of the first period ($timestamp = start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Single Interval > Interval calculator returned correct status (ELIGIBLE) for a timestamp after first eligibility period has started."));

    // Check eligibility at exactly the end of the last period ($timestamp = 30 seconds after start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + 30);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Single Interval > Interval calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));

    // Check eligibility after last period ends ($timestamp = 31 seconds after start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + 31);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Single Interval > Interval calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));

    /**
     * Check eligibility mid-interval
     * ($timestamp = 7 seconds after start).
     * Expected result:
     *  period_start = start time + 1 interval * interval length
     *  period_end = start time + 2 intervals * interval length
     */
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + 7);
    $this->assertTrue($result['period_start'] == $start + 1 * $interval_length, t('Single Interval > Interval calculator returned correct period_start for a mid-interval timestamp.'));
    $this->assertTrue($result['period_end'] == $start + 2 * $interval_length, t('Single Interval > Interval calculator returned correct period_end for a mid-interval timestamp.'));

    /**
     * Check eligibility between intervals
     * ($timestamp = 10 seconds after start. i.e. end of second interval / start of third interval)
     * Expected result:
     *  period_start = start time + 2 intervals * interval length
     *  period_end = start time + 3 intervals * interval length
     */
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + 10);
    $this->assertTrue($result['period_start'] == $start + 2 * $interval_length, t("Single Interval > Interval calculator returned correct period_start for a timestamp between intervals."));
    $this->assertTrue($result['period_end'] == $start + 3 * $interval_length, t("Single Interval > Interval calculator returned correct period_end for a timestamp between intervals."));

     /**
      * Check eligibility after user claims a point.
      * (Claim point 5 seconds after start, check eligibility right after it)
      * @note This test requires a patch for userpoints.module (~line 1029)
      * to enable assigning points with future timestamps.
      */
    $claimed = $start + 5;
    $params = array(
      'points' => 1,
      'uid' => $this->authenticated_user->uid,
      'time_stamp' => $claimed,
    );
    userpoints_userpointsapi($params);
    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Single Interval > Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point."));
    $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $interval_length, t("Single Interval > Interval calculator returned correct next value for when the user will become eligible after claiming a point."));
  }

  /**
   * Call userpoints_collect_eligibility() with series restrictions
   */
  function testUserpointsCollectSeriesEligibility() {
    /**
     * Define series testing settings and generate series restriction.
     * Test settings:
     * - 5 second gap between timestamps in series
     * - 6 timestamps (end = 35 seconds from now)
     * - First period starts 5 seconds from now.
     */
    $period_length = 5;
    $num_timestamps = 6;    // 6 timestamps = 5 periods
    $delay = $period_length;
    userpoints_collect_restriction_generate_series(NULL, $num_timestamps, $period_length);
    $start = time() + $delay;

    // Check eligibility before first period starts ($timestamp = 5 seconds before start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start - $period_length);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_EARLY, t("Single Series > Series calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));

    // Check eligibility at exactly the start of the first period ($timestamp = start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Single Series > Series calculator returned correct status (ELIGIBLE) for a timestamp after first eligibility period has started."));

    // Check eligibility at exactly the end of the last period ($timestamp = 30 seconds after start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + ($num_timestamps - 1) * $period_length);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Single Series > Series calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));

    // Check eligibility after last period ends ($timestamp = 31 seconds after start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + ($num_timestamps - 1) * $period_length + 1);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Single Series > Series calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));

    /**
     * Check eligibility mid-interval
     * ($timestamp = 7 seconds after start).
     * Expected result:
     *  period_start = start time + 5-second gap (1 timestamp * 5 second period length)
     *  period_end = start time + 10-second gap (2 timestamps * 5 second period length)
     */
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + 7);
    $this->assertTrue($result['period_start'] == $start + 1 * $period_length, t('Single Series > Series calculator returned correct period_start for an in-period timestamp.'));
    $this->assertTrue($result['period_end'] == $start + 2 * $period_length, t('Single Series > Series calculator returned correct period_end for an in-period timestamp.'));

    /**
     * Check eligibility exactly on a series timestamp
     * ($timestamp = 10 seconds after start. i.e. the exact time of second timestamp in the series)
     * Expected result:
     *  period_start = start time + 10-second gap (2 timestamps * 5 second period length)
     *  period_end = start time + 15-seconds gap (3 timestamps * 5 second period length)
     */
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + 10);
    $this->assertTrue($result['period_start'] == $start + 2 * $period_length, t("Single Series > Series calculator returned correct period_start for a timestamp exactly on a series timestamp."));
    $this->assertTrue($result['period_end'] == $start + 3 * $period_length, t("Single Series > Series calculator returned correct period_end for a timestamp exactly on a series timestamp."));

    /**
     * Check eligibility after user claims a point.
     * (Claim point 5 seconds after start, check eligibility right after it)
     * @note This test requires a patch for userpoints.module (~line 1029)
     * to enable assigning points with future timestamps.
     */
   $claimed = $start + 5;
   $params = array(
     'points' => 1,
     'uid' => $this->authenticated_user->uid,
     'time_stamp' => $claimed,
   );
   userpoints_userpointsapi($params);
   $result = userpoints_collect_eligibility($this->authenticated_user, $claimed);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Single Series > Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point."));
   $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $period_length, t("Single Series > Series calculator returned correct next value for when the user will become eligible after claiming a point."));
  }

  /**
   * Call userpoints_collect_eligibility() with multiple interval restrictions
   */
  function testMultipleIntervalEligibility() {
    /**
     * Define multiple interval testing settings and generate interval restrictions.
     *
     * Test settings:
     *
     * a. First restriction
     * - 5 second intervals
     * - First period starts 10 seconds from now.
     * - Last period last is 30 seconds from now.
     *
     * b. Second restriction
     * - 8 second intervals
     * - First period starts 10 seconds from now.
     * - Last period last is 48 seconds from now.
     *
     */

   // generate and save taxonomy vocabulary terms
   $term_a = (object) array(
     'vid' => userpoints_get_vid(),
     'name' => "Test Point A",
   );

   $term_b = (object) array(
     'vid' => userpoints_get_vid(),
     'name' => "Test Point B",
   );
   taxonomy_term_save($term_a);
   taxonomy_term_save($term_b);

   // set up and generate restrictions
   $length = array(
     'a' => 5,
     'b' => 8,
   );
   $start = time() + 10;
   userpoints_collect_restriction_generate_interval($term_a->tid, $start, $start + 30, $length['a'], TRUE);
   userpoints_collect_restriction_generate_interval($term_b->tid, $start, $start + 48, $length['b']);

   // Check eligibility before first interval starts ($timestamp = 5/8 seconds before start)
   $result = userpoints_collect_eligibility($this->authenticated_user, $start - $length['a'], $term_a->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_EARLY, t("Multiple Interval > A: Interval Calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));
   $result = userpoints_collect_eligibility($this->authenticated_user, $start - $length['b'], $term_b->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_EARLY, t("Multiple Interval > B: Interval Calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));

   // Check eligibility at exactly the start of the first interval ($timestamp = start)
   $result = userpoints_collect_eligibility($this->authenticated_user, $start, $term_a->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Multiple Interval > A: Interval Calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));
   $result = userpoints_collect_eligibility($this->authenticated_user, $start, $term_b->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Multiple Interval > B: Interval Calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));

   // Check eligibility at exactly the end of the last interval ($timestamp = 30/48 seconds after start)
   $result = userpoints_collect_eligibility($this->authenticated_user, $start + 30, $term_a->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Multiple Interval > A: Interval Calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));
   $result = userpoints_collect_eligibility($this->authenticated_user, $start + 48, $term_b->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Multiple Interval > B: Interval Calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));

   // Check eligibility after last interval ends ($timestamp = 31/49 seconds after start)
   $result = userpoints_collect_eligibility($this->authenticated_user, $start + 31, $term_a->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Multiple Interval > A: Interval Calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));
   $result = userpoints_collect_eligibility($this->authenticated_user, $start + 49, $term_b->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Multiple Interval > B: Interval Calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));

   /**
   * Check eligibility after user claims a point towards one of the intervals (Interval A).
   * (Claim point 3 seconds after start (when both intervals will be active), check eligibility right after it)
   * @note This test requires a patch for userpoints.module (~line 1029)
   * to enable assigning points with future timestamps.
   */
   $claimed = $start + 3;
   $params = array(
     'points' => 1,
     'uid' => $this->authenticated_user->uid,
     'time_stamp' => $claimed,
     'tid' => $term_a->tid,
   );
   userpoints_userpointsapi($params);
   $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_a->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Multiple Interval > A: Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point towards a particular interval (Interval A)."));
   $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $length['a'], t("Multiple Interval > A: Interval calculator returned correct next value for when the user will become eligible for a particular interval (Interval A) after claiming a point."));
   $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_b->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Multiple Interval > B: Interval calculator returned correct status (ELIGIBLE) for a timestamp after user has claimed a point towards different interval (Interval A)."));

   /**
   * Check eligibility after user claims points towards both of the intervals (Interval A and B).
   * (Claim point 6 seconds after start (after interval A has reset, and both intervals are active), check eligibility right after it)
   * @note This test requires a patch for userpoints.module (~line 1029)
   * to enable assigning points with future timestamps.
   */
   $claimed = $start + 6;
   $params_a = array(
     'points' => 1,
     'uid' => $this->authenticated_user->uid,
     'time_stamp' => $claimed,
     'tid' => $term_a->tid,
   );
   userpoints_userpointsapi($params_a);
   $params_b = array(
     'points' => 1,
     'uid' => $this->authenticated_user->uid,
     'time_stamp' => $claimed,
     'tid' => $term_b->tid,
   );
   userpoints_userpointsapi($params_b);

   $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_a->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Multiple Interval > A: Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both intervals (Interval A and B)"));
   $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $length['a'], t("Multiple Interval > A: Interval calculator returned correct next value for when the user will become eligible for a particular interval (Interval A) after claiming a point."));
   $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_b->tid);
   $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Multiple Interval > B: Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both intervals (Interval A and B)"));
   $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $length['b'], t("Multiple Interval > B: Interval calculator returned correct next value for when the user will become eligible for a particular interval (Interval B) after claiming a point."));

  }

  /**
   * Call userpoints_collect_eligibility() with multiple series restrictions
   */
  function testMultipleSeriesEligibility() {
    /**
     * Define multiple series testing settings and generate series restrictions.
     *
     * Test settings:
     *
     * a. First restriction
     * - 5 second periods
     * - First period starts 10 seconds from now.
     * - Last period last is 30 seconds from now.
     *
     * b. Second restriction
     * - 8 second periods
     * - First period starts 10 seconds from now.
     * - Last period last is 48 seconds from now.
     *
     */

    // generate and save taxonomy vocabulary terms
    $term_a = (object) array(
      'vid' => userpoints_get_vid(),
      'name' => "Test Point A",
    );

    $term_b = (object) array(
      'vid' => userpoints_get_vid(),
      'name' => "Test Point B",
    );
    taxonomy_term_save($term_a);
    taxonomy_term_save($term_b);

    // set up and generate restrictions
    $num_timestamps = 6;  // 6 timestamps = 5 eligibility periods
    $length = array(
      'a' => 5,
      'b' => 8,
    );
    // recall: series generator's first period starts at 1 period's length from the current time
    $start = array(
      'a' => time() + $length['a'],
      'b' => time() + $length['b'],
    );
    userpoints_collect_restriction_generate_series($term_a->tid, $num_timestamps, $length['a'], TRUE);
    userpoints_collect_restriction_generate_series($term_b->tid, $num_timestamps, $length['b']);

    // Check eligibility before first interval starts ($timestamp = 5/8 seconds before start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['a'] - $length['a'], $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_EARLY, t("Multiple Series > A: Series calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['b'] - $length['b'], $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_EARLY, t("Multiple Series > B: Series calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));

    // Check eligibility at exactly the start of the first interval ($timestamp = start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['a'], $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Multiple Series > A: Series calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['b'], $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Multiple Series > B: Series calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));

    // Check eligibility at exactly the end of the last interval ($timestamp = 30/48 seconds after start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['a'] + ($num_timestamps - 1) * $length['a'], $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Multiple Series > A: Series calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['b'] + ($num_timestamps - 1) * $length['b'], $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Multiple Series > B: Series calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));

    // Check eligibility after last interval ends ($timestamp = 31/49 seconds after start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['a'] + ($num_timestamps - 1) * $length['a'] + 1, $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Multiple Series > A: Series calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['b'] + ($num_timestamps - 1) * $length['b'] + 1, $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Multiple Series > B: Series calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));

    /**
     * Check eligibility after user claims a point towards one of the series (Series B).
     * (Claim point at the start of series B (when both series will be active), check eligibility right after it)
     * @note This test requires a patch for userpoints.module (~line 1029)
     * to enable assigning points with future timestamps.
     */
    $claimed = $start['b'];
    $params = array(
      'points' => 1,
      'uid' => $this->authenticated_user->uid,
      'time_stamp' => $claimed,
      'tid' => $term_b->tid,
    );
    userpoints_userpointsapi($params);
    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Multiple Series > A: Series calculator returned correct status (ELIGIBLE) for a timestamp after user has claimed a point towards a different series (Series B)."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Multiple Series > B: Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point towards a particular series (Series B)."));
    $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $length['b'], t("Multiple Series > B: Series calculator returned correct next value for when the user will become eligible for a particular series (Series B) after claiming a point."));

    /**
     * Check eligibility after user claims points towards both of the series (Series A and B).
     * (Claim point 8 seconds after start of series B (after Series B has reset and both series are active again), check eligibility right after it)
     * @note This test requires a patch for userpoints.module (~line 1029)
     * to enable assigning points with future timestamps.
     */
    $claimed = $start['b'] + 8;
    $params_a = array(
      'points' => 1,
      'uid' => $this->authenticated_user->uid,
      'time_stamp' => $claimed,
      'tid' => $term_a->tid,
    );
    userpoints_userpointsapi($params_a);
    $params_b = array(
      'points' => 1,
      'uid' => $this->authenticated_user->uid,
      'time_stamp' => $claimed,
      'tid' => $term_b->tid,
    );
    userpoints_userpointsapi($params_b);

    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Multiple Series > A: Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both series (Series A and B)"));
    $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $length['a'], t("Multiple Series > A: Series calculator returned correct next value for when the user will become eligible for a particular series (Series A) after claiming a point."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Multiple Series > B: Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both series (Series A and B)"));
    $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $length['b'], t("Multiple Series > B: Series calculator returned correct next value for when the user will become eligible for a particular series (Series B) after claiming a point."));

  }

  /**
   * Call userpoints_collect_eligibility() with mixed interval and series restrictions
   */
  function testMixedEligibility() {
    /**
     * Define testing settings and generate series restrictions.
     *
     * Test settings:
     *
     * a. First restriction
     * - 5 second intervals
     * - First interval starts 10 seconds from now.
     * - Last interval last is 30 seconds after start.
     *
     * b. Second restriction
     * - 5 second periods
     * - First period starts 5 seconds from now.
     * - Last period last is 30 seconds after start.
     *
     */

    // generate and save taxonomy vocabulary terms
    $term_a = (object) array(
      'vid' => userpoints_get_vid(),
      'name' => "Test Point A",
    );

    $term_b = (object) array(
      'vid' => userpoints_get_vid(),
      'name' => "Test Point B",
    );
    taxonomy_term_save($term_a);
    taxonomy_term_save($term_b);

    // set up and generate restrictions
    $num_timestamps = 6;  // 6 timestamps = 5 eligibility periods
    $length = array(
      'a' => 5,
      'b' => 5,
    );
    // recall: series generator's first period starts at 1 period's length from the current time
    // try matching up start times of both
    $start = array(
      'a' => time() + 5,
      'b' => time() + $length['b'],
    );
    userpoints_collect_restriction_generate_interval($term_a->tid, $start['a'], $start['a'] + ($num_timestamps * $length['a']), $length['a'], TRUE);
    userpoints_collect_restriction_generate_series($term_b->tid, $num_timestamps, $length['b']);

    // Check eligibility before first interval/period starts ($timestamp = 5 seconds before start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['a'] - $length['a'], $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_EARLY, t("Mixed > A: Interval calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['b'] - $length['b'], $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_EARLY, t("Mixed > B: Series calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));

    // Check eligibility at exactly the start of the first interval/period ($timestamp = start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['a'], $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Mixed > A: Interval calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['b'], $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Mixed > B: Series calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));

    // Check eligibility at exactly the end of the last interval/period ($timestamp = 30 seconds after start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['a'] + ($num_timestamps) * $length['a'], $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Mixed > A: Interval calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['b'] + ($num_timestamps - 1) * $length['b'], $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Mixed > B: Series calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));

    // Check eligibility after last interval/period ends ($timestamp = 31 seconds after start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['a'] + ($num_timestamps) * $length['a'] + 1, $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Mixed > A: Interval calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $start['b'] + ($num_timestamps - 1) * $length['b'] + 1, $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_LATE, t("Mixed > B: Series calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));

    /**
     * Check eligibility for interval after user claims a point towards the series restriction
     * (Claim point 5 seconds after start, check eligibility right after it)
     * @note This test requires a patch for userpoints.module (~line 1029)
     * to enable assigning points with future timestamps.
     */
    $claimed = $start['a'] + 5;
    $params = array(
      'points' => 1,
      'uid' => $this->authenticated_user->uid,
      'time_stamp' => $claimed,
      'tid' => $term_b->tid,
    );
    userpoints_userpointsapi($params);
    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Mixed > A: Interval calculator returned correct status (ELIGIBLE) for a timestamp after user has claimed a point towards a series restriction."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Mixed > B: Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point towards a series restriction."));
    $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $length['b'], t("Mixed > B: Series calculator returned correct next value for when the user will become eligible for a particular series after claiming a point."));

    /**
     * Check eligibility for series after user claims a point towards the interval restriction
     * (Claim point 10 seconds after start, (both restrictions have reset by then),
     * check eligibility right after it)
     * @note This test requires a patch for userpoints.module (~line 1029)
     * to enable assigning points with future timestamps.
     */
    $claimed = $start['a'] + 10;
    $params = array(
      'points' => 1,
      'uid' => $this->authenticated_user->uid,
      'time_stamp' => $claimed,
      'tid' => $term_a->tid,
    );
    userpoints_userpointsapi($params);
    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Mixed > A: Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point towards an interval restriction."));
    $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $length['a'], t("Mixed > A: Interval calculator returned correct next value for when the user will become eligible for a particular interval after claiming a point."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Mixed > B: Series calculator returned correct status (ELIGIBLE) for a timestamp after user has claimed a point towards an interval restriction."));

    /**
     * Check eligibility after user claims points towards both the interval and series restrictions
     * (Claim point 15 seconds after start (both restrictions have reset by then),
     * check eligibility right after it)
     * @note This test requires a patch for userpoints.module (~line 1029)
     * to enable assigning points with future timestamps.
     */
    $claimed = $start['a'] + 15;
    $params_a = array(
      'points' => 1,
      'uid' => $this->authenticated_user->uid,
      'time_stamp' => $claimed,
      'tid' => $term_a->tid,
    );
    userpoints_userpointsapi($params_a);
    $params_b = array(
      'points' => 1,
      'uid' => $this->authenticated_user->uid,
      'time_stamp' => $claimed,
      'tid' => $term_b->tid,
    );
    userpoints_userpointsapi($params_b);

    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_a->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Mixed > A: Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both the interval and series restrictions."));
    $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $length['a'], t("Mixed > A: Interval calculator returned correct next value for when the user will become eligible for a particular interval after claiming a point."));
    $result = userpoints_collect_eligibility($this->authenticated_user, $claimed, $term_b->tid);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Mixed > B: Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both the interval and series restrictions."));
    $this->assertTrue($result['next'] !== 0 && $result['next'] != -1 && $result['next'] <= $length['b'], t("Mixed > B: Series calculator returned correct next value for when the user will become eligible for a particular series after claiming a point."));
  }
}
