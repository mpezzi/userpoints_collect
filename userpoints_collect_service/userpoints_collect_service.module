<?php

/**
 * @file
 * Exposes userpoints collect functionality via a service.
 */


/**
 * Implements hook_services_resources().
 */
function userpoints_collect_service_services_resources() {
  return array(
    'userpoints_collect' => array(
      'actions' => array(
        'eligibility' => array(
          'help' => 'Check the eligibility of an account to collect a point.',
          'file' => array('file' => 'inc', 'module' => 'userpoints_collect_service', 'name' => 'resources/userpoints_collect_resource'),
          'callback' => '_userpoints_collect_resource_eligibility',
          'access callback' => '_userpoints_collect_resource_access',
          'access arguments' => array('eligibility'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'tid',
              'description' => 'The Category ID.',
              'type' => 'int',
              'source' => array('param' => 'tid'),
            ),
          ),
        ),
        'add' => array(
          'help' => 'Add points to account if eligible.',
          'file' => array('file' => 'inc', 'module' => 'userpoints_collect_service', 'name' => 'resources/userpoints_collect_resource'),
          'callback' => '_userpoints_collect_resource_add',
          'access callback' => '_userpoints_collect_resource_access',
          'access arguments' => array('add'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'tid',
              'type' => 'int',
              'optional' => TRUE,
              'source' => array('param' => 'tid'),
              'description' => t('An optional Term ID for the category.'),
            ),
            array(
              'name' => 'operation',
              'type' => 'string',
              'optional' => TRUE,
              'source' => array('param' => 'operation'),
              'description' => t('An operation string for this transaction.'),
            ),
            array(
              'name' => 'description',
              'type' => 'string',
              'optional' => TRUE,
              'source' => array('param' => 'description'),
              'description' => t('An optional description of this transaction.'),
            ),
            array(
              'name' => 'entity_type',
              'type' => 'string',
              'optional' => TRUE,
              'source' => array('param' => 'entity_type'),
              'description' => t('An optional description of this transaction.'),
            ),
            array(
              'name' => 'entity_id',
              'type' => 'int',
              'optional' => TRUE,
              'source' => array('param' => 'entity_id'),
              'description' => t('An optional description of this transaction.'),
            ),
          ),
        ),
        'get' => array(
          'help' => 'Get the current users points.',
          'file' => array('file' => 'inc', 'module' => 'userpoints_collect_service', 'name' => 'resources/userpoints_collect_resource'),
          'callback' => '_userpoints_collect_resource_get',
          'access callback' => '_userpoints_collect_resource_access',
          'access arguments' => array('get'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'tid',
              'description' => 'The Category ID.',
              'type' => 'int',
              'optional' => TRUE,
              'source' => array('param' => 'tid'),
            ),
          ),
        ),
        'account' => array(
          'help' => 'Get the current users object.',
          'file' => array('file' => 'inc', 'module' => 'userpoints_collect_service', 'name' => 'resources/userpoints_collect_resource'),
          'callback' => '_userpoints_collect_resource_account',
          'access callback' => '_userpoints_collect_resource_access',
          'access arguments' => array('account'),
          'access arguments append' => TRUE,
          'args' => array(),
        ),
      ),
    ),
  );
}
