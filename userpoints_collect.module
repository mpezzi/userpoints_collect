<?php

/**
 * @file
 * Provides a block for users to collect points within time constraints.
 */


define('USERPOINTS_COLLECT_MODE_SERIES', 1);
define('USERPOINTS_COLLECT_MODE_INTERVAL', 2);

/**
 * Implements hook_permission().
 */
function userpoints_collect_permission() {
  return array(
    'use userpoints collect' => array(
      'title' => t('Use userpoints collect'),
      'description' => t('Allows users to use userpoints collect.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function userpoints_collect_theme() {
  return array(
    'userpoints_collect_form' => array(
      'render element' => 'form',
      'template' => 'userpoints-collect-form'
    ),
  );
}

/**
 * Implements hook_menu().
 */
function userpoints_collect_menu() {
  return array(
    'admin/config/people/userpoints/collect' => array(
      'title' => 'Collect settings',
      'description' => 'Settings for userpoints collect',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('userpoints_collect_admin_settings'),
      'access callback' => 'userpoints_admin_access',
      'access arguments' => array('administer'),
      'file' => 'userpoints_collect.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 11,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function userpoints_collect_block_info() {
  return array(
    'userpoints_collect' => array(
      'info' => t('Userpoints Collect'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function userpoints_collect_block_view($delta = '') {
  if ( $delta == 'userpoints_collect' && user_access('use userpoints collect') ) {
    return array(
      'content' => drupal_get_form('userpoints_collect_form'),
    );
  }
}

/**
 * Returns an array containing configuration settings.
 *
 * @param $variable
 *   A string representing a configuration variable.
 * @return
 *   A saved config variable or an array of all variables.
 */
function userpoints_collect_config($variable = NULL) {
  $config = array(
    'mode' => variable_get('userpoints_collect_mode', USERPOINTS_COLLECT_MODE_INTERVAL),
    'submit_label' => variable_get('userpoints_collect_submit_label', 'Collect now!'),
    'return_label' => variable_get('userpoints_collect_return_label', 'Back to Facebook'),
    'return_url' => variable_get('userpoints_collect_return_url', 'http://facebook.com'),
    'no_ballots_label' => variable_get('userpoints_collect_no_ballots_label', 'No more ballots remaining'),
    'next_ballot_label' => variable_get('userpoints_collect_next_ballot_label', 'Next ballot available in @timeleft'),
    'after_collect_path' => variable_get('userpoints_collect_after_collect_path', '<front>'),
  );

  return isset($config[$variable]) ? $config[$variable] : $config;
}

/**
 * Returns a Userpoints collect form.
 */
function userpoints_collect_form($form, &$form_state) {
  global $user;

  if ( userpoints_collect_access() ) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => userpoints_collect_config('submit_label'),
    );
  }
  else {
    $timeleft = userpoints_collect_eligibility_timeleft();

    $form['link'] = array(
      '#prefix' => '<p>',
      '#suffix' => '</p>',
      '#markup' => l(userpoints_collect_config('return_label'), userpoints_collect_config('return_url'), array('attributes' => array('class' => array('btn', 'btn-large', 'btn-primary')))),
    );

    $form['timeleft'] = array(
      '#prefix' => '<p>',
      '#suffix' => '</p>',
      '#markup' => $timeleft ? format_string(userpoints_collect_config('next_ballot_label'), array('@timeleft' => $timeleft)) : userpoints_collect_config('no_ballots_label'),
    );

    $form['#disabled'] = TRUE;
  }

  return $form;
}

/**
 * Validate a Userpoints collect form submission.
 */
function userpoints_collect_form_validate($form, &$form_state) {
  //drupal_set_message(__FUNCTION__);
}

/**
 * Process a Userpoints collect form submission.
 */
function userpoints_collect_form_submit($form, &$form_state) {
  global $user;

  userpoints_collect_add(array(
    'uid' => $user->uid,
    'points' => 1,
  ));

  $form_state['redirect'] = userpoints_collect_config('after_collect_path');
}

/**
 * Determine whether the user has access to collect userpoints.
 *
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 * @return
 *   Boolean TRUE if the account has the requested permission.
 */
function userpoints_collect_access($account = NULL) {
  global $user;

  if ( !isset($account) ) {
    $account = $user;
  }

  // User #1 has privileges.
  if ( $account->uid == 1 ) {
    return TRUE;
  }

  // Check if account has permission and is eligible to collect.
  if ( user_access('use userpoints collect', $account) && userpoints_collect_eligibility($account) ) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Returns whether a user is eligible to collect a point.
 *
 * @param $account
 *   A user object.
 * @return
 *   Boolean TRUE if the account is eligible.
 */
function userpoints_collect_eligibility($account = NULL) {
  $last_txns = drupal_static(__FUNCTION__, array());

  if ( !isset($account) ) {
    global $user;
    $account = $user;
  }

  // Load the last transaction by user.
  if ( !isset($last_txns[$account->uid]) ) {
    $last_txns[$account->uid] = db_select('userpoints_txn', 'u')
      ->fields('u')
      ->condition('uid', $account->uid)
      ->orderBy('time_stamp', 'DESC')
      ->range(0, 1)
      ->execute()
      ->fetchObject();
  }

  $last_txn = $last_txns[$account->uid];

  if ( $last_txn ) {
    $last_timestamp = $last_txn->time_stamp;
  }

  // Get the eligibility period (min and max timestamp) that the current time would fall into
  $period = userpoints_collect_eligibility_period();

  // If period returns false, it means there are no periods of eligibility (at least not yet)
  if ( $period ) {
    $eligibility_period_min = $period['min'];
    $eligibility_period_max = $period['max'];
  }
  else {
    return FALSE;
  }

  // Check if valid timestamps were retrieved for min / max eligibility periods
  if ( isset($eligibility_period_min) && $eligibility_period_min > 0
    && isset($eligibility_period_max) && $eligibility_period_max > 0 ) {

    // User has no point transactions on record check current time if it is within eligibility period.
    if ( !isset($last_timestamp) ) {
      return $eligibility_period_min < time() && $eligibility_period_max > time();
    }
    // The user has point transaction(s) on record
    else {
      // User's last point claimed is within the eligibility period
      if ( $last_timestamp > $eligibility_period_min
        && $last_timestamp < $eligibility_period_max ) {
        return FALSE;
      }
      else {
        // drupal_set_message( t('Next eligibility period from @min to @max', array('@min' => $eligibility_period_min,'@max' => $eligibility_period_max,)) );
        return TRUE;
      }
    }
  }

  // No eligible dates were found in the database
  return FALSE;
}

/**
 * Returns eligibility information for a timestamp.
 *
 * @param $timestamp
 *   A timestamp to check eligibility for.
 * @return
 *   A array containing min, max, first and final or FALSE.
 */
function userpoints_collect_eligibility_period($timestamp = NULL) {
  if ( is_null($timestamp) ) {
    $timestamp = time();
  }

  switch ( userpoints_collect_config('mode') ) {
    case USERPOINTS_COLLECT_MODE_INTERVAL:
      return userpoints_collect_eligibility_period_interval($timestamp);
    case USERPOINTS_COLLECT_MODE_SERIES:
      return userpoints_collect_eligibility_period_series($timestamp);
  }

  return FALSE;
}

/**
 * Returns eligibility information for interval based time checking.
 *
 * @param $timestamp
 *   A timestamp to check eligibility for.
 * @return
 *   A array containing min, max, first and final or FALSE.
 */
function userpoints_collect_eligibility_period_interval($timestamp) {
  // retrieve interval settings from variables table and do
  // an interval-based calculation for next eligibility period
  $interval_settings = variable_get('userpoints_collect_dates_interval', NULL);
  if (is_null($interval_settings)) {
    // default interval settings
    // create ten 3-minute intervals starting 10 seconds from now
    $interval_settings = userpoints_collect_date_load_default_interval_settings();
  }

  // return false (no eligibility period) if the
  // current time is before first/earliest eligibility period
  // or the current time is past the final/latest eligibility period
  if ($timestamp < $interval_settings['first']) {
    return FALSE;
  }
  elseif (isset($interval_settings['final']) && $timestamp > $interval_settings['final']) {
    return FALSE;
  }

  $period = array(
    'first' => $interval_settings['first'],
  );

  // set the final eligiblity timestamp if it was set
  // to a definite time
  if ( !is_null($interval_settings['final']) ) {
    $period['final'] = $interval_settings['final'];
  }

  // calculate the max/min period timestamps using
  // the number of intervals it takes to count up
  // to the specified timestamp
  $num_intervals = ($timestamp - $interval_settings['first']) / $interval_settings['interval'];
  if ( ($timestamp - $interval_settings['first']) % $interval_settings['interval'] == 0) {
    // if the interval size divides timestamp evenly,
    // then timestamp falls right onto an interval min (the start of an interval)
    $period['min'] = $interval_settings['first'] + $num_intervals * $interval_settings['interval'];
    $period['max'] = $interval_settings['first'] + ($num_intervals + 1) * $interval_settings['interval'];
  }
  else {
    // if num_intervals isn't a whole number, timestamp falls
    // in the middle of an interval.  ex. a number_intervals of 2.4
    // rounds down to 2 intervals (min_intervals) and rounds up
    // to 3 intervals (max_intervals)
    $min_intervals = floor($num_intervals);
    $max_intervals = ceil($num_intervals);

    $period['min'] = $interval_settings['first'] + $min_intervals * $interval_settings['interval'];
    $period['max'] = $interval_settings['first'] + $max_intervals * $interval_settings['interval'];
  }

  // TODO: remove after debug
  // $format = "%H:%M:%S";
  // dsm(t('Interval settings: @first, @interval, @final', array(
  //   '@first' => strftime($format, $interval_settings['first']),
  //   '@interval' => $interval_settings['interval'],
  //   // '@final' => strftime($format, $interval_settings['final']),
  // )));
  // dsm(t('Eligibility period: @min to @max', array(
  //   '@min' => strftime($format, $period['min']),
  //   '@max' => strftime($format, $period['max']),
  // )));

  return $period;
}

/**
 * Returns eligibility information for series based time checking.
 *
 * @param $timestamp
 *   A timestamp to check eligibility for.
 * @return
 *   A array containing min, max, first and final or FALSE.
 */
function userpoints_collect_eligibility_period_series($timestamp) {
  // Array based calculation
  $times = variable_get('userpoints_collect_series', NULL);
  if (is_null($times)) {
    $times = userpoints_collect_generate_series();
    variable_set('userpoints_collect_series', $times);
  }

  // TODO: remove after debug
  // $format = "%H:%M:%S";
  //     $all_times = "";
  //     for ($i = 0; $i < count($times); $i++) {
  //       $all_times .= strftime($format, $times[$i]) . " ";
  //     }
  // dsm(t($all_times));

  // return false (no eligibility period) if the
  // current time is before first/earliest eligibility period
  // or the current time is past the final/latest eligibility period
  if (time() < $times[0] || time() > $times[count($times) - 1]) {
    return FALSE;
  }

  $period = array();
  $period['first'] = $times[0];
  $period['final'] = $times[count($times) - 1];

  // sort the times in descending order before
  // iterating over them
  rsort($times, SORT_NUMERIC);

  // find the minimum/maximum time for the eligibility period
  for ($i = 0; $i < count($times); $i++) {
    // handle boundary cases
    if ($times[$i] == $timestamp) {
      // timestamp = final(latest) timestamp in array
      if ($i == 0) {
        $period['min'] = $period['final'];
        $period['max'] = $times[1];
      }
      // timestamp = first(earliest) timestamp in array
      elseif ($i == count($times) - 1) {
        $period['min'] = count($times) - 2;
        $period['max'] = $period['first'];
      }
    }
    else {
      if ($times[$i] < $timestamp) {
        $period['min'] = $times[$i];
        $period['max'] = $times[$i - 1];

        // TODO: Remove after debug
        // $format = "%H:%M:%S";
        // dsm(t('Eligibility period: @min to @max', array(
        //   '@min' => strftime($format, $period['min']),
        //   '@max' => strftime($format, $period['max']),
        //   )));

        break;
      }
    }
  }

  return $period;
}

/**
 * Returns next timestamp for when the user can collect
 * a point, or false if there are no upcoming eligible times.
 */
function userpoints_collect_next_eligible_time() {
  $period = userpoints_collect_eligibility_period();
  // return the period max (upcoming time) only if that max
  // is not set to NULL (i.e. there IS a definite eligibility endpoint)
  // and if the max isn't the last eligible time
  if (isset($period['final']) && !is_null($period['final'])) {
    return $period['max'] < $period['final'] ? $period['max'] : FALSE;
  }
  else {
    // otherwise always return the max for timestamp
    // the eligibility period
    return $period['max'];
  }
}

/**
 * Returns the time left for collect eligibility.
 */
function userpoints_collect_eligibility_timeleft() {
  $next_eligible = userpoints_collect_next_eligible_time();

  if ($next_eligible && $next_eligible > 0) {
    return format_interval($next_eligible - time());
  }
  else {
    return FALSE;
  }
}

/**
 * Add points for a user.
 */
function userpoints_collect_add($params) {
  if ( userpoints_collect_access(user_load($params['uid'])) ) {
    return userpoints_userpointsapi($params);
  }

  return array(
    'status' => FALSE,
    'reason' => t('User is not eligible.'),
  );
}

/**
 * Returns an array of possible collect restriction periods.
 */
function userpoints_collect_eligibility_periods() {
  return array(
    NULL => 'Never',
    60 => '1 minute',
    300 => '5 minutes',
    600 => '10 minutes',
    900 => '15 minutes',
    1800 => 'Half hour',
    3600 => 'One hour',
    86400 => 'One Day',
    604800 => 'One Week',
    1209600 => 'Two Weeks',
    2419200 => 'Four Weeks',
    31536000 => '365 Days',
  );
}

/**
 * Process variables for userpoints-collect-form.tpl.php
 *
 * The $variables array contains the following arguments:
 * - $form
 *
 * @see userpoints-collect-block-form.tpl.php
 */
function template_preprocess_userpoints_collect_form(&$variables) {
  $variables['userpoints_collect'] = array();
  foreach ( element_children($variables['form']) as $key ) {
    $variables['userpoints_collect'][$key] = drupal_render($variables['form'][$key]);
  }

  $variables['userpoints_collect_form'] = implode($variables['userpoints_collect']);
}

/**
 * Removes any userpoints_collect date interval settings from the database
 */
function userpoints_collect_date_clear_interval_settings() {
  variable_del('userpoints_collect_dates_interval');
}

/**
 * Sets default values for intervals into Drupal's variables database table.
 *
 * @param $interval_length
 *    the time in seconds that each period of eligibility should last
 *    default: 180 (3 minutes)
 * @param $repeat
 *    the number of intervals.  Set to NULL to repeat indefinitely
 *    default: NULL
 */
function userpoints_collect_date_set_interval_settings($interval_length = 180, $start = NULL, $repeat = NULL) {
  userpoints_collect_date_clear_interval_settings();
  $interval_settings = array();
  $interval_settings['first'] = is_null($start) ? time() + 10 : $start;
  $interval_settings['interval'] = $interval_length;

  // check if repeat is set to be indefinite
  is_null($repeat) ? $interval_settings['final'] = NULL : $interval_settings['final'] = $interval_settings['first'] + $interval_length * $repeat;
  variable_set('userpoints_collect_dates_interval', $interval_settings);
  drupal_set_message(t('Successfully generated @repeat intervals, @secs_apart @sec_pluralized apart.', array(
    '@repeat' => is_null($repeat) ? 'x' : $repeat,
    '@secs_apart' => $interval_length,
    '@sec_pluralized' => format_plural($interval_length, 'second', 'seconds'),
  )));
}

/**
 * Returns an array containing the default interval settings
 *
 * Specifically, returns an array of ten timestamps, spaced in one-minute
 *  intervals starting ten seconds from now
 */
function userpoints_collect_date_load_default_interval_settings() {
  $interval_settings = array();
  $interval_settings['first'] = time() + 10;
  $interval_settings['interval'] = 60;
  $interval_settings['final'] = $interval_settings['first'] + $interval_settings['interval'] * 10;
  return $interval_settings;
}

/**
 * Clears out userpoints_collect timestamp timestamps set in variables table
 */
function userpoints_collect_clear_series() {
  variable_del('userpoints_collect_series');
}

/**
 * Generates an array of ordered or shuffled timestamps with
 * the first timestamp starting 10 seconds from now
 *
 * @param $random_dist
 *    randomizes the distribution (time between dates)
 *    if set, this overrides any setting for $minutes_apart
 * @param $shuffle
 *    shuffles the elements of the array
 * @param $number_of_timestamps
 *    the number of timestamps to generate
 * @param $minutes_apart
 *    the number of minutes between each timestamp in the array
 */
function userpoints_collect_generate_series($random_dist = FALSE, $shuffle = FALSE, $number_of_timestamps = 5, $minutes_apart = 1) {
  $dates = array();
  $start = time() + 10;
  array_push($dates, $start);
  for ( $i = 1; $i <= $number_of_timestamps; $i++ ) {
    // if random_dist is true, a multiplier (from 1-5) will be factored into each date
    $random_dist == TRUE ? $multiplier = rand(1, 5) : $multiplier = 1;
    array_push( $dates, $start + ($i * $minutes_apart * $multiplier * 60) );
  }

  if ($shuffle == TRUE) {
    shuffle($dates);
  }

  drupal_set_message(t('Successfully generated an array of @number_of_timestamps @random_dist dates, @minutes_apart @min_pluralized apart@shuffled', array(
    '@random_dist' => $random_dist == TRUE ? 'randomly distributed' : 'evenly distributed',
    '@number_of_timestamps' => $number_of_timestamps,
    '@minutes_apart' => $random_dist == TRUE ? 'x' : $minutes_apart,
    '@min_pluralized' => $random_dist == TRUE ? "minutes" : format_plural($minutes_apart, 'minute', 'minutes'),
    '@shuffled' => $shuffle == TRUE ? ', and then shuffled them.' : '.',
  )));
  return $dates;
}

/**
  * Generates and saves an array of ordered or shuffled timestamps with
  * the first timestamp starting 10 seconds from now.
 *
 * @param $random_dist
 *    randomizes the distribution (time between dates)
 *    if set, this overrides any setting for $minutes_apart
 * @param $shuffle
 *    shuffles the elements of the array
 * @param $number_of_timestamps
 *    the number of timestamps to generate
 * @param $minutes_apart
 *    the number of minutes between each timestamp in the array
 */
function userpoints_collect_generate_and_save_series($random_dist = FALSE, $shuffle = FALSE, $number_of_timestamps = 5, $minutes_apart = 1) {
  userpoints_collect_clear_series();
  $dates = userpoints_collect_generate_series($random_dist, $shuffle, $number_of_timestamps, $minutes_apart);
  variable_set('userpoints_collect_series', $dates);
}
